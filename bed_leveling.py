import matplotlib.pyplot as plt
from matplotlib import cm
import numpy as np
from decimal import Decimal

"""
average offset from zero using the average as 0

todo:
make z min and max scale depending on min and max of the array

"""

#
# log_mesh = np.array([[11.0, 60.0, 0.1604], [33.0, 60.0, 0.1591], [55.0, 60.0, 0.1538], [77.0, 60.0, 0.1708], [99.0, 60.0, 0.1818], [121.0, 60.0, 0.1846], [143.0, 60.0, 0.1923], [165.0, 60.0, 0.1913], [187.0, 60.0, 0.1941], [209.0, 60.0, 0.2007], [231.0, 60.0, 0.21], [253.0, 60.0, 0.2183], [275.0, 60.0, 0.2109], [297.0, 60.0, 0.2041], [319.0, 60.0, 0.2095], [319.0, 95.0, 0.2069], [297.0, 95.0, 0.2086], [275.0, 95.0, 0.2192], [253.0, 95.0, 0.2321], [231.0, 95.0, 0.2293], [209.0, 95.0, 0.2208], [187.0, 95.0, 0.2176], [165.0, 95.0, 0.2137], [143.0, 95.0, 0.2146], [121.0, 95.0, 0.2053], [99.0, 95.0, 0.1996], [77.0, 95.0, 0.1906], [55.0, 95.0, 0.1743], [33.0, 95.0, 0.17], [11.0, 95.0, 0.1726], [11.0, 130.0, 0.1891], [33.0, 130.0, 0.1863], [55.0, 130.0, 0.1898], [77.0, 130.0, 0.2005], [99.0, 130.0, 0.2081], [121.0, 130.0, 0.2151], [143.0, 130.0, 0.2224], [165.0, 130.0, 0.2151], [187.0, 130.0, 0.2161], [209.0, 130.0, 0.215], [231.0, 130.0, 0.2246], [253.0, 130.0, 0.2288], [275.0, 130.0, 0.2221], [297.0, 130.0, 0.2096], [319.0, 130.0, 0.2024], [319.0, 165.0, 0.1972], [297.0, 165.0, 0.2102], [275.0, 165.0, 0.2239], [253.0, 165.0, 0.2381], [231.0, 165.0, 0.2335], [209.0, 165.0, 0.2293], [187.0, 165.0, 0.2328], [165.0, 165.0, 0.2324], [143.0, 165.0, 0.2387], [121.0, 165.0, 0.2334], [99.0, 165.0, 0.227], [77.0, 165.0, 0.2201], [55.0, 165.0, 0.2101], [33.0, 165.0, 0.2044], [11.0, 165.0, 0.2012], [11.0, 200.0, 0.2008], [33.0, 200.0, 0.1952], [55.0, 200.0, 0.1894], [77.0, 200.0, 0.1912], [99.0, 200.0, 0.1958], [121.0, 200.0, 0.2009], [143.0, 200.0, 0.2027], [165.0, 200.0, 0.1937], [187.0, 200.0, 0.1945], [209.0, 200.0, 0.1886], [231.0, 200.0, 0.1989], [253.0, 200.0, 0.2], [275.0, 200.0, 0.1868], [297.0, 200.0, 0.1742], [319.0, 200.0, 0.1624], [319.0, 235.0, 0.1535], [297.0, 235.0, 0.1644], [275.0, 235.0, 0.1739], [253.0, 235.0, 0.1923], [231.0, 235.0, 0.2007], [209.0, 235.0, 0.1972], [187.0, 235.0, 0.2032], [165.0, 235.0, 0.2], [143.0, 235.0, 0.2127], [121.0, 235.0, 0.2092], [99.0, 235.0, 0.2084], [77.0, 235.0, 0.2053], [55.0, 235.0, 0.2019], [33.0, 235.0, 0.2036], [11.0, 235.0, 0.2095], [11.0, 270.0, 0.2439], [33.0, 270.0, 0.2284], [55.0, 270.0, 0.2231], [77.0, 270.0, 0.2229], [99.0, 270.0, 0.2214], [121.0, 270.0, 0.2222], [143.0, 270.0, 0.221], [165.0, 270.0, 0.2033], [187.0, 270.0, 0.2019], [209.0, 270.0, 0.1888], [231.0, 270.0, 0.1874], [253.0, 270.0, 0.1818], [275.0, 270.0, 0.1744], [297.0, 270.0, 0.1661], [319.0, 270.0, 0.1504]])
# # log_mesh=np.array([[11.0, 60.0, -0.0935], [33.0, 60.0, -0.0805], [55.0, 60.0, -0.0708], [77.0, 60.0, -0.0533], [99.0, 60.0, -0.0434], [121.0, 60.0, -0.03], [143.0, 60.0, -0.0238], [165.0, 60.0, -0.0229], [187.0, 60.0, -0.0188], [209.0, 60.0, -0.0201], [231.0, 60.0, -0.0173], [253.0, 60.0, -0.0236], [275.0, 60.0, -0.0377], [297.0, 60.0, -0.0598], [319.0, 60.0, -0.0837], [319.0, 95.0, -0.066], [297.0, 95.0, -0.0411], [275.0, 95.0, -0.0146], [253.0, 95.0, 0.0037], [231.0, 95.0, 0.0121], [209.0, 95.0, 0.01], [187.0, 95.0, 0.0101], [165.0, 95.0, 0.007], [143.0, 95.0, 0.0063], [121.0, 95.0, -0.0002], [99.0, 95.0, -0.0135], [77.0, 95.0, -0.0255], [55.0, 95.0, -0.0428], [33.0, 95.0, -0.0567], [11.0, 95.0, -0.0685], [11.0, 130.0, -0.0781], [33.0, 130.0, -0.0659], [55.0, 130.0, -0.0509], [77.0, 130.0, -0.0345], [99.0, 130.0, -0.0209], [121.0, 130.0, -0.0093], [143.0, 130.0, -0.0014], [165.0, 130.0, -0.0033], [187.0, 130.0, -0.0011], [209.0, 130.0, -0.0031], [231.0, 130.0, -0.0034], [253.0, 130.0, -0.0135], [275.0, 130.0, -0.031], [297.0, 130.0, -0.0585], [319.0, 130.0, -0.0866], [319.0, 165.0, -0.1013], [297.0, 165.0, -0.0741], [275.0, 165.0, -0.0437], [253.0, 165.0, -0.023], [231.0, 165.0, -0.0115], [209.0, 165.0, -0.0114], [187.0, 165.0, -0.007], [165.0, 165.0, -0.0104], [143.0, 165.0, -0.009], [121.0, 165.0, -0.0153], [99.0, 165.0, -0.028], [77.0, 165.0, -0.0427], [55.0, 165.0, -0.0612], [33.0, 165.0, -0.0743], [11.0, 165.0, -0.0851], [11.0, 200.0, -0.0793], [33.0, 200.0, -0.0699], [55.0, 200.0, -0.0612], [77.0, 200.0, -0.0449], [99.0, 200.0, -0.0304], [121.0, 200.0, -0.0174], [143.0, 200.0, -0.0132], [165.0, 200.0, -0.0155], [187.0, 200.0, -0.0135], [209.0, 200.0, -0.0184], [231.0, 200.0, -0.0181], [253.0, 200.0, -0.0306], [275.0, 200.0, -0.0487], [297.0, 200.0, -0.0763], [319.0, 200.0, -0.1008], [319.0, 235.0, -0.0962], [297.0, 235.0, -0.0735], [275.0, 235.0, -0.0458], [253.0, 235.0, -0.0272], [231.0, 235.0, -0.0162], [209.0, 235.0, -0.0204], [187.0, 235.0, -0.0166], [165.0, 235.0, -0.0169], [143.0, 235.0, -0.0115], [121.0, 235.0, -0.0136], [99.0, 235.0, -0.0231], [77.0, 235.0, -0.0352], [55.0, 235.0, -0.0495], [33.0, 235.0, -0.0592], [11.0, 235.0, -0.0706], [11.0, 270.0, -0.0547], [33.0, 270.0, -0.0483], [55.0, 270.0, -0.0423], [77.0, 270.0, -0.0276], [99.0, 270.0, -0.0175], [121.0, 270.0, -0.01], [143.0, 270.0, -0.0073], [165.0, 270.0, -0.0128], [187.0, 270.0, -0.0116], [209.0, 270.0, -0.0169], [231.0, 270.0, -0.0126], [253.0, 270.0, -0.0216], [275.0, 270.0, -0.0386], [297.0, 270.0, -0.0683], [319.0, 270.0, -0.0875]] )
# # bed_mesh=np.array([[11.0, 60.0, -0.2177], [33.0, 60.0, -0.2197], [55.0, 60.0, -0.218], [77.0, 60.0, -0.2127], [99.0, 60.0, -0.2172], [121.0, 60.0, -0.212], [143.0, 60.0, -0.2134], [165.0, 60.0, -0.2148], [187.0, 60.0, -0.2102], [209.0, 60.0, -0.2107], [231.0, 60.0, -0.2018], [253.0, 60.0, -0.2028], [275.0, 60.0, -0.2063], [297.0, 60.0, -0.2234], [319.0, 60.0, -0.2326], [319.0, 95.0, -0.2334], [297.0, 95.0, -0.2281], [275.0, 95.0, -0.2175], [253.0, 95.0, -0.2141], [231.0, 95.0, -0.2092], [209.0, 95.0, -0.2187], [187.0, 95.0, -0.2091], [165.0, 95.0, -0.2106], [143.0, 95.0, -0.2027], [121.0, 95.0, -0.2064], [99.0, 95.0, -0.2216], [77.0, 95.0, -0.2282], [55.0, 95.0, -0.2324], [33.0, 95.0, -0.2285], [11.0, 95.0, -0.2225], [11.0, 130.0, -0.2538], [33.0, 130.0, -0.2584], [55.0, 130.0, -0.2614], [77.0, 130.0, -0.2587], [99.0, 130.0, -0.2427], [121.0, 130.0, -0.2292], [143.0, 130.0, -0.226], [165.0, 130.0, -0.2301], [187.0, 130.0, -0.2312], [209.0, 130.0, -0.2337], [231.0, 130.0, -0.2359], [253.0, 130.0, -0.239], [275.0, 130.0, -0.2434], [297.0, 130.0, -0.2555], [319.0, 130.0, -0.2629], [319.0, 165.0, -0.2868], [297.0, 165.0, -0.2828], [275.0, 165.0, -0.2691], [253.0, 165.0, -0.2611], [231.0, 165.0, -0.2564], [209.0, 165.0, -0.2639], [187.0, 165.0, -0.2593], [165.0, 165.0, -0.2622], [143.0, 165.0, -0.2534], [121.0, 165.0, -0.2553], [99.0, 165.0, -0.2715], [77.0, 165.0, -0.2804], [55.0, 165.0, -0.2846], [33.0, 165.0, -0.2841], [11.0, 165.0, -0.2811], [11.0, 200.0, -0.2926], [33.0, 200.0, -0.2936], [55.0, 200.0, -0.2918], [77.0, 200.0, -0.2864], [99.0, 200.0, -0.2794], [121.0, 200.0, -0.2723], [143.0, 200.0, -0.2727], [165.0, 200.0, -0.2729], [187.0, 200.0, -0.2661], [209.0, 200.0, -0.2698], [231.0, 200.0, -0.2654], [253.0, 200.0, -0.2643], [275.0, 200.0, -0.268], [297.0, 200.0, -0.2799], [319.0, 200.0, -0.2889], [319.0, 235.0, -0.2818], [297.0, 235.0, -0.2726], [275.0, 235.0, -0.2592], [253.0, 235.0, -0.255], [231.0, 235.0, -0.2554], [209.0, 235.0, -0.2647], [187.0, 235.0, -0.2656], [165.0, 235.0, -0.2706], [143.0, 235.0, -0.2671], [121.0, 235.0, -0.271], [99.0, 235.0, -0.2767], [77.0, 235.0, -0.2832], [55.0, 235.0, -0.2927], [33.0, 235.0, -0.2956], [11.0, 235.0, -0.2945], [11.0, 270.0, -0.2852], [33.0, 270.0, -0.2883], [55.0, 270.0, -0.2875], [77.0, 270.0, -0.2749], [99.0, 270.0, -0.2675], [121.0, 270.0, -0.2579], [143.0, 270.0, -0.2546], [165.0, 270.0, -0.2576], [187.0, 270.0, -0.2502], [209.0, 270.0, -0.2482], [231.0, 270.0, -0.2342], [253.0, 270.0, -0.2369], [275.0, 270.0, -0.2424], [297.0, 270.0, -0.2595], [319.0, 270.0, -0.2664]])
# # bed_mesh=np.array( [[11.0, 60.0, 0.1557], [33.0, 60.0, 0.156], [55.0, 60.0, 0.1537], [77.0, 60.0, 0.1717], [99.0, 60.0, 0.1853], [121.0, 60.0, 0.1877], [143.0, 60.0, 0.1955], [165.0, 60.0, 0.1968], [187.0, 60.0, 0.1979], [209.0, 60.0, 0.2036], [231.0, 60.0, 0.2113], [253.0, 60.0, 0.2198], [275.0, 60.0, 0.212], [297.0, 60.0, 0.2033], [319.0, 60.0, 0.208], [319.0, 95.0, 0.2049], [297.0, 95.0, 0.2077], [275.0, 95.0, 0.2187], [253.0, 95.0, 0.2318], [231.0, 95.0, 0.2298], [209.0, 95.0, 0.2218], [187.0, 95.0, 0.2191], [165.0, 95.0, 0.2158], [143.0, 95.0, 0.2158], [121.0, 95.0, 0.206], [99.0, 95.0, 0.2005], [77.0, 95.0, 0.1891], [55.0, 95.0, 0.1748], [33.0, 95.0, 0.1717], [11.0, 95.0, 0.1734], [11.0, 130.0, 0.1923], [33.0, 130.0, 0.1895], [55.0, 130.0, 0.1926], [77.0, 130.0, 0.2052], [99.0, 130.0, 0.2139], [121.0, 130.0, 0.2178], [143.0, 130.0, 0.2249], [165.0, 130.0, 0.2201], [187.0, 130.0, 0.2199], [209.0, 130.0, 0.2195], [231.0, 130.0, 0.2276], [253.0, 130.0, 0.2322], [275.0, 130.0, 0.2236], [297.0, 130.0, 0.2097], [319.0, 130.0, 0.2019], [319.0, 165.0, 0.1961], [297.0, 165.0, 0.2103], [275.0, 165.0, 0.2261], [253.0, 165.0, 0.2401], [231.0, 165.0, 0.2376], [209.0, 165.0, 0.2332], [187.0, 165.0, 0.2359], [165.0, 165.0, 0.2368], [143.0, 165.0, 0.2428], [121.0, 165.0, 0.2368], [99.0, 165.0, 0.2316], [77.0, 165.0, 0.2252], [55.0, 165.0, 0.2156], [33.0, 165.0, 0.2087], [11.0, 165.0, 0.2057], [11.0, 200.0, 0.2092], [33.0, 200.0, 0.2041], [55.0, 200.0, 0.1981], [77.0, 200.0, 0.2007], [99.0, 200.0, 0.2039], [121.0, 200.0, 0.2092], [143.0, 200.0, 0.2083], [165.0, 200.0, 0.2002], [187.0, 200.0, 0.2004], [209.0, 200.0, 0.1958], [231.0, 200.0, 0.205], [253.0, 200.0, 0.2053], [275.0, 200.0, 0.1923], [297.0, 200.0, 0.1775], [319.0, 200.0, 0.1644], [319.0, 235.0, 0.1571], [297.0, 235.0, 0.1691], [275.0, 235.0, 0.1781], [253.0, 235.0, 0.1983], [231.0, 235.0, 0.2099], [209.0, 235.0, 0.2049], [187.0, 235.0, 0.2099], [165.0, 235.0, 0.2083], [143.0, 235.0, 0.2218], [121.0, 235.0, 0.2196], [99.0, 235.0, 0.2148], [77.0, 235.0, 0.2136], [55.0, 235.0, 0.2117], [33.0, 235.0, 0.2144], [11.0, 235.0, 0.2179], [11.0, 270.0, 0.2555], [33.0, 270.0, 0.2401], [55.0, 270.0, 0.2339], [77.0, 270.0, 0.2343], [99.0, 270.0, 0.2332], [121.0, 270.0, 0.2324], [143.0, 270.0, 0.2296], [165.0, 270.0, 0.2128], [187.0, 270.0, 0.2095], [209.0, 270.0, 0.1973], [231.0, 270.0, 0.194], [253.0, 270.0, 0.1887], [275.0, 270.0, 0.1802], [297.0, 270.0, 0.17], [319.0, 270.0, 0.1521]] )
#
def offset(mesh):
    offset = np.zeros(len(mesh))
    zero = average1(mesh)
    for i in range(len(mesh)):
        offset[i] = zero - mesh[i]
        # temp = zero - mesh[i]
        # np.append(offset,temp)
    # print("offset: ",offset)
    average = np.average(offset)
    # print(average)
    return average

def xcords(mesh):
    tempx = [i[0] for i in mesh]
    # x = np.arange(tempx)
    return tempx

def ycords(mesh):
    tempy = [i[1] for i in mesh]
    # y = np.arange(tempy)
    return tempy

def zcords(mesh):
    tempz = [i[2] for i in mesh]
    # for i in range(len(tempz)):
        # tempz[i]=tempz[i]/1000
    # z = np.arange(tempz)
    return tempz

def maxi(mesh):
    tempz = zcords(mesh)
    max = np.max(tempz)
    return max

def mini(mesh):
    tempz = zcords(mesh)
    min = np.min(tempz)
    return min

def average1(mesh):
    tempz = mesh
    length = len(tempz)
    adding = np.sum(tempz)
    ave = adding/length
    # print("average: ", ave)
    return round(ave,10)

def dev(max,min):
    return max - min

def graphtoolpath(mesh):
    fig = plt.figure(figsize = (13, 8))
    ax = fig.add_subplot(221, projection='3d')
    # x = y = np.arange(0, 300, 50) #min, max, steps
    x = xcords(mesh)
    y = ycords(mesh)
    z = zcords(mesh)

    # print(x)
    # print("---")
    # print(y)
    X,Y,Z= np.meshgrid(x, y,z)
    ax.plot3D(x,y,z,'gray')
    ax.plot_trisurf(x,y,z,cmap='Reds') #surface
    ax.set_zlim(-.5, .5)

    #ax.plot3D(x,y,z,'gray') #tool path
    # ax.scatter3D(x,y,z,c=z,cmap='Greys')
    #now to work on z cords
    # print("shape",X.shape)
    #
    # Z = zs.reshape(X.shape)
    # print(np.array(Z))
    # ax.plot_surface(X, Y, Z)
    plt.title('Bed leveling')
    plt.xlabel('X Axis (mm)')
    ax.set_ylabel('Y Axis (mm)')
    ax.set_zlabel('Z Axis (um)')


    toolpath = fig.add_subplot(222, projection='3d')
    x = xcords(mesh)
    y = ycords(mesh)
    z = zcords(mesh)
    # print(x)
    # print("---")
    # print(y)
    X, Y, Z = np.meshgrid(x, y, z)
    toolpath.plot3D(x, y, z, 'gray')
    # toolpath.plot_trisurf(x, y, z, cmap='Reds')  # surface
    # ax.plot3D(x,y,z,'gray') #tool path
    toolpath.scatter3D(x, y, z, c=z, cmap='Greys')
    toolpath.set_zlim(-.5, .5)

    # now to work on z cords
    # print("shape",X.shape)
    #
    # Z = zs.reshape(X.shape)
    # print(np.array(Z))
    # ax.plot_surface(X, Y, Z)
    plt.title('Tool Path')
    toolpath.set_xlabel('X Axis (mm)')
    toolpath.set_ylabel('Y Axis (mm)')
    toolpath.set_zlabel('Z Axis (um)')


    #temp for now, will add seperate GUI
    labels = fig.add_subplot(223)
    info = fig.add_subplot(224)
    txt = "Max: {} \u03BCm\n Min: {} \u03BCm\n Average: {} \u03BCm\n Deviation: {}  \u03BCm\n Average Offset: {} \u03BCm ".format(round(maxi(mesh),4),round(mini(mesh),4),round(average1(z),4),round(dev(maxi(mesh),mini(mesh)),4),'%.2E' % Decimal(offset(z)),4)

    labels.text(0.5, 0.5, txt, size=24, ha='center', va='center') #max
    labels.axis('off')
    info.axis('off')


    plt.setp(labels.get_xticklabels(), visible=False)
    plt.setp(labels.get_yticklabels(), visible=False)

    plt.show()


# graphtoolpath(log_mesh)

# offsetmesh = offset(ztoavg)
# ztoavg = zcords(log_mesh)
